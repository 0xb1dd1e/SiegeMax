//------------------------------------------------
//--- 010 Editor v15.0.2 Binary Template
//
//      File: DSiegeLNC.bt
//   Authors: biddle
//   Version: pre-alpha PoC
//   Purpose: A template for Dungeon Siege siege_nodes.lnc files
//  Category: Game
// File Mask: *.lnc
//  ID Bytes: 
//   History: 
//------------------------------------------------


typedef struct {
    float x, y, z;
} VEC3;

typedef struct {
    float u, v;
} UV;

typedef struct {
    VEC3 row0;
    VEC3 row1;
    VEC3 row2;
} MAT33;

typedef struct {
    unsigned char R,G,B,A;  // could be ABGR?
} RGBA;

typedef struct {
    UINT32  guid    <format=hex>;
    UINT32  offset  <format=hex>;
    UINT32  size;
} LogicalTableEntry;

typedef struct {
    UINT16  localId;
    UINT16  farId;
} LNodalLeafConnect;

typedef struct {
    UINT32  farSiegeNode <format=hex>;
    UINT8   farId;
    UINT32  numLeafConnections;
    if (numLeafConnections > 0) {
    	LNodalLeafConnect leafConnections[numLeafConnections];
    }    
} LNodeConnection <optimize=false>;

typedef struct {
    UINT8   id;
    UINT32  flags <format=hex>;  
    UINT16  numNodeConnections;    
    if (numNodeConnections > 0) {
    	LNodeConnection nodeConnections[numNodeConnections];
    }  
} LogicalSiegeNode <optimize=false>; 

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
    UINT8   pad3,pad4;    
} LightDescriptor5;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
    UINT8   pad3,pad4,pad5;    
} LightDescriptor6;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
    UINT8   pad3,pad4,pad5;    
} LightDescriptor8;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
	UINT8	onTimer;    
    UINT8   pad3,pad4;    
} LightDescriptor9;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
	UINT8	onTimer;
    UINT8   pad3,pad4;    
} LightDescriptor10;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;    
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
	UINT8	onTimer;
    UINT8   pad3,pad4;    
    float   nearDistance;   // ver 11+
    float   farDistance;    // ver 11+  
} LightDescriptor11;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;
    float   innerRadius;
    float   outerRadius;
    float   intensity;
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
	UINT8	onTimer;
    UINT8   pad3,pad4;
    float   nearDistance;
    float   farDistance;   
} LightDescriptor12;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;    
    float   innerRadius;
    float   outerRadius;
    float   intensity;
    float   maxIntensity;   // 13 or 14. Need a sample..
	UINT8	drawShadow;
	UINT8	occludeGeometry;
	UINT8	affectsActors;
	UINT8	affectsItems;
	UINT8	affectsTerrain;
	UINT8	onTimer;
    UINT8   pad3,pad4;    
    float   nearDistance;
    float   farDistance; 
    float   length;         // ver 13+ (beam lights)
} LightDescriptor13;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
    float   maxIntensity;
  	UINT8	drawShadow;
    UINT8	occludeGeometry;
  	UINT8	affectsActors;
    UINT8	affectsItems;
    UINT8	affectsTerrain;
    UINT8	onTimer;
    UINT8   pad3,pad4;        
    float   attenuationBias; // was nearDistance
    float   farDistance; 
    float   length;         
} LightDescriptor14;

typedef struct {
    UINT32  type;
    UINT32  subType;
    RGBA    color;
    UINT8   active;
    UINT8   pad0,pad1,pad2;        
    float   innerRadius;
    float   outerRadius;
    float   intensity;
    float   maxIntensity;
  	UINT8	drawShadow;
    UINT8	occludeGeometry;
  	UINT8	affectsActors;
    UINT8	affectsItems;
    UINT8	affectsTerrain;
    UINT8	onTimer;
    UINT8   pad3,pad4;        
    float   attenuationBias; 
    float   farDistance; 
    float   length;         
} LightDescriptor15; // Space Siege

typedef struct {
    UINT32  guid    <format=hex>;
    VEC3    position;
} HotPoint;

typedef struct {
    UINT32 lightIndex1;
    UINT32 lightIndex2;
    UINT32 lightIndex3;
    float  interpAmount1;
    float  interpAmount2;
    float  interpAmount3;
} LightInterpolant;
    
typedef struct {
    VEC3    position;
    UV      texcoord;
    float   projectW;
    LightInterpolant lightInterp;
} DecalVertex;
       
typedef struct {
    UINT32  guid    <format=hex>;
    UINT32  numVertices;
    if (numVertices > 0) {
        DecalVertex verts[numVertices];
    }
} DecalSet <optimize=false>;

typedef struct {
    UINT32  version;
    if (version >= 2) {
        float levelOfDetail;
    }
    UINT8   activeState;
    BYTE    alpha;
    VEC3    position;
    MAT33   orientation;
    float   angle;
    float   aspect;
    float   nearPlane;
    float   farPlane;
    string  decalTex;
    UINT32  numDecalSets;
    if (numDecalSets > 0) {
        DecalSet decalSets[numDecalSets];
    } 
} Decal <optimize=false>;
      
typedef struct {
    UINT32  version;
    
    if (version >= 10) {     
        UINT32  checksum <format=hex>;
    } 
    else {
        struct {
            UINT32  numTris;
	        UINT32  numVerts;
            double  xSum;
            double  ySum;
            double  zSum;
        } CheckSum;
    }
    
    VEC3    minBox;
    VEC3    maxBox;
    UINT32  numLogicalNodes;
    
    if (numLogicalNodes > 0) {
    	LogicalSiegeNode logicalNodes[numLogicalNodes];
    }
    
    UINT32  numVertices;
    UINT32  numLights;
    
    if (version <= 8) {
        UINT32  guid    <format=hex>;
    }    
    
    if (numLights > 0) {
        struct {
            if (version > 8) {
                UINT32  guid    <format=hex>;
            }
            VEC3    position;
            VEC3    direction;
            
            // Most versions were transitional...
            if (version < 5) {
                // Not known
            }                         
            else if (version == 5) {
                LightDescriptor5 desc;
            }             
            else if (version == 6) {
                LightDescriptor6 desc;
            }            
            else if (version == 8) {
                LightDescriptor8 desc; 
            }            
            else if (version == 9) {
                LightDescriptor9 desc;
            }            
            else if (version == 10) {
                LightDescriptor10 desc; // DS1
            } 
            else if (version == 11){
                LightDescriptor11 desc;
            }
            else if (version == 12) {
                LightDescriptor12 desc;  // DS2
            }
            else if (version == 13) {
                LightDescriptor13 desc;
            }
            else if (version == 14) {            
                LightDescriptor14 desc;
            } 
            else if (version == 15) {            
                LightDescriptor15 desc;  // SS1-ish
            } 
            else {
                // TBD...
            }                
            if (version >= 10 && desc.affectsTerrain) {
                // These lists contain the number to skip if value > 1.00001
                if (numVertices > 0) {
                    float lightEffect[numVertices];
                    if (version > 11 && desc.occludeGeometry) {
                        float shadowEffect[numVertices];
                    }
                }
            }
        } lights[numLights] <optimize=false>;
    }
    
    if (version >= 8) {
        UINT32  numHotPoints;   
        if (numHotPoints > 0) {
            HotPoint hotPoints[numHotPoints];
        }
    }
    
    if (version >= 9) {
        UINT32  numDecals;   
        if (numDecals > 0) {
            Decal decals[numDecals];
        }    
    }
          
} SiegeNode <optimize=false>;

UINT32 numEntries;
LogicalTableEntry mapOffsets[numEntries];
SiegeNode theNodes[numEntries];
